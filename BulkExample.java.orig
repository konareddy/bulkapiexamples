import java.io.*;
import java.util.*;


import com.sforce.async.*;
import com.sforce.soap.partner.PartnerConnection;
import com.sforce.ws.ConnectionException;
import com.sforce.ws.ConnectorConfig;

public class BulkExample{

	public static void main(String[] args) throws AsyncApiException, ConnectionException, IOException {

		BulkExample example = new BulkExample();
		
	}

	public void runSample(String sObjectType, String userName, String password, String sampleFileName) 
			throws AsyncApiException, ConnectionException, IOException  {
		BulkConnection connection  = getBulkConnection(userName, password);
		JobInfo job = createJob(sobjectType, connection);
		List<BatchInfo> batchInfoList = createBatchesFromCSVFile(connection, job, sampleFileName);
		closeJob(connection, job.getId());
		awaitCompletion(connection, job, batchInfoList);
		checkResults(connection, job, batchInfoList);
		
	}

        private void checkResults(BulkConnection connection, JobInfo job, 
				List<BatchInfo> batchInfoList) 
		throws AsyncApiException, IOException {
             for(BatchInfo b : batchInfoList) {
		CSVReader rdr = new CSVReader(connection.getBatchResultStream (job.getId(), b.getId()));
		List<String> resultHeder = rdr.nextRecord();
		int resultCols = resultHeader.size();
		List<String> row;
		
		while((row = rdr.nextRecord()) != null) {
   		   Map<String, String> resultInfo = new HashMap<String, String>();
		   for(int i = 0; i<resultCols;i++) {
		      resultInfo.put(resultHeader.get(i), row.get(i));
		}	
	        boolean success = Boolean.valueOf(resultInfo.get("Success"));
	        boolean created = Boolean.valueOf(resultInfo.get("Created"));
	        String id = resultInfo.get("Id");
	        String error = resultInfo.get("Error");
	        if (success && created ) {
	           System.out.println("Created row with id " + id );
	        }   
	        else if (!success) {
	           System.out.println("Failed with error: " + error);
                }	
                }
          }		
       }
	 
	  private void closeJob(BulkConnection connection, String jobId) throws AsyncApiException {
		
		JobInfo job = new JobInfo();
		job.setId(jobId);
		job.setState(JobStateEnum.Closed);
		connection.updateJob(job);

	  }


	 private void awaitCompletion(BulkConnection connection, JobInfo job, List<BatchInfo> batchInfoList) 
			throws AsyncApiException {
		long sleepTime = 0L;
		Set<String> incomplete = new HashSet<String>();
		for(BatchInfo bi: batchInfoList) {
		   incomplete.add(bi.getId());
		}
		while (!incomplete.isEmpty()){
		   try {
		      Thread.sleep(sleepTime);
		   }
		   catch(InterruptedException e) {}
		   System.out.println("Awaiting results ...." + incomplete.size());
		   sleepTime = 10000;
		   BatchInfo[] statusList = 
			connection.getBatchInfoList(job.getId()).getBatchInfo();
		   for(BatchInfo b : statusList) {
			if (b.getState() == BatchStateEnum.Completed || b.getState() == BatchStateEnum.Failed) {
			   if (incomplete.remote(b.getId())) {
			      System.out.println("Batch Status : \n" + b);
			   }
			}
		   }
		}
	}


	/* Create new job using the Bulk API 
	*/

	private JobInfo createJob(String sobjectType, BulkConnection connection) throws AsyncApiException {
	    JobInfo job = new  JobInfo();
	    job.setObject(sobjectType);
	    job.setOperation(OperationEnum.insert);
	    job.setContentType(ContentType.CSV);
	    job = connection.createJob(job);
	    System.out.println(job);
	    return job;
	}


       private BulkConnection getBulkConnection(String userName, String password) throws ConnectionException, AsyncApiException {

	    ConnectorConfig partnerConfig = new ConnectorConfig();
	    partnerConfig.setUsername(userName);
	    partnerConfig.setPassword(password);
	    partnerConfig.setAuthEndpoint("http://login.salesforce.com/services/Soap/u/41.0");
	    new PartnerConnection(partnerConfig);
	    ConnectorConfig config = new ConnectorConfig();
	    config.setSessionId(parnerConfig.getSessionId());
	    String soapEndpoint = partnerConfig.getServiceEndpoint();
	    String apiVersion   = "41.0";
     	    String restEndpoint = soalEndpoint.substring(0, soalEndpoint.indexOf("Soap/")) + "async/" + apiVersion;
	    config.setRestEndpoint(restEndpoint);
	    config.setCompression(true);
	    config.setTraceMessage(false);
	    BulkConnection connection = new BulkConnection(config);
	    return connection;
	    
       }	


       private List<BatchInfo> createBatchesFromCSVFile(BulkConnection connection, JobInfo jobInfo, String csvFileName) throws IOException, AsyncApiException {

	   List<BatchInfo> batchInfos = new ArrayList<BatchInfo>();
	   BufferedReader  rdr 		= new BufferedReader(new InputStreamReader(new FileInputStream(csvFileName)));
	
		// split CSV into multiple files	
	   try {
	      FileOutPutStream tmpOut = new FileOutPutStream(tmpFile);
	      int maxBytesPerBatch    = 1000000; 
	      int maxRowsPerBatch		= 10000;
	   	int currentBytes 		= 0;
	   	int currentLines		= 0;
	   	String nextLine;
	   	while((nextLine = rdr.readLine()) != null) {
	   	   byte[] bytes = (nextLine + "\n").getBytes("UTF-8");
	   	   if (currentBytes + bytes.length > maxBytesPerBatch || currentLines > maxRowsPerBatch) {
	   		createBatch(tmpOut, tmpFile, batchInfos, connection, jobInfo);
	                currentBytes = 0;
	   		currentLines = 0;
	   	   }
	   	   if (currentBytes == 0 ) {
	   	      tmpOut = new FileOutPutStream(tmpFile);
	   	      tmpOut.write(headerBytes);
	   	      currentBytes = headerBytesLength;
	   	      currentLines = 1;
	   	   }
	   	   tmpOut.write(bytes);
	   	   currentBytes += headerBytesLength;
	   	   currentLines = 1;
	   	}
	   	tmpOut.write(bytes);
	   	currentBytes += bytes.length;
	   	currentLines++;
		if (currentLines > 1) {
			createBatch(tmpOut, tmpFile, batchInfos, connection, jobInfo);
		}

      }
      finally {

      		tmpFile.delete(); 
      }
      return batchInfos; 

  }


  private void createBatch(FileOutPutStream tmpOut, File tmpFile, List<BatchInfo> batchInfos, BulkConnection connection, JobInfo jobInfo ) throws IOException, AsyncApiExceptoin {
  		tmpOut.flush();
  		tmpOut.close();
  		FileInputStream tmpInputStream = new FileInputStream(tmpFile);
  		try {
  			BatchInfo batchInfo = connection.createBatchFromStream(jobInfo, tmpInputStream);
  			System.out.println(batchInfo);
  			batchInfos.add(batchInfo);
  		}

  		finally {
  			tmpInputStream.close();
  		}
  }

}















